.TH "Memory management" 3 "Sat Nov 23 2013" "Version 1.0BetaR01" "eSolid - Memory Management" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Memory management \- 
.PP
Memory Management overview\&.  

.SS "Modules"

.in +1c
.ti -1c
.RI "\fBAPI\fP"
.br
.RI "\fIMemory Management API\&. \fP"
.ti -1c
.RI "\fBConfiguration\fP"
.br
.ti -1c
.RI "\fBImplementation\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Memory Management overview\&. 


.SH "Sadrzaj"
.PP
.IP "\(bu" 2
\fBStaticki memorijski menadzer\fP
.IP "\(bu" 2
\fBDinamicki memorijski menadzer\fP
.IP "\(bu" 2
\fBPool memorijski menadzer\fP
.IP "\(bu" 2
\fBKonfiguracija Memory Management modula\fP
.PP
.SH "Staticki memorijski menadzer"
.PP
Staticki memorijski menadzer moze samo da alocira memoriju i jednom alocirana memorija se ne moze osloboditi\&. Koristi se kada je potrebno staticki alocirati objekte koji se nikada ne brisu\&. Ovaj memorijski menadzer je najjednostavniji i najbrzi, pa se preporucuje za mikroprocesore sa ogranicenim performansama\&. Potrosnja memorije iznosi samo 4-8 bajtova za ceo memorijski menadzer i ne postoji dodatna potrosnja memorije prilikom alociranja\&.
.PP
Staticni memorijski menadzer je jedinstven za embedded sistem\&. Ne mogu postojati vise instanci staticnog alokatora\&. Velicina memorije koja se predaje staticnom alokatoru na koriscenje se podesava opcijom \fBOPT_MEM_SMEM_SIZE\fP\&.
.SH "Dinamicki memorijski menadzer"
.PP
Dinamicki memorijski menadzer je po funkcionalnosti identican sa funkcijama standardne C biblioteke malloc/free, sa tom izmenom da je prilagodjen za rad sa embedded sistemima\&.
.PP
Za razliku od staticnog alokatora, koji je jedinstven za sistem, u jednom embedded sistemu mogu postojati nekoliko instanci dinamickih alokatora\&. Razliciti dinamicki alokatori se referenciraju strukturom tipa \fBesDMemHandle_T\fP\&. Pogledati primer \fBdmem_two_buffs\&.c\fP\&.
.SS "First Fit algoritam"
U ovom algoritmu, alokator cuva listu slobodnih blokova i po prijemu zahteva za memoriju, skenira duz liste za prvim blokom koji je dovoljno veliki da opsluzi zahtev\&. Ako je izabrani blok dovoljno veci nego sto je zahtevano onda se blok deli na dva dela, jedan deo se predaje korisniku, a drugi blok se postavlja nazad u listu slobodnih blokova\&. Kada se vrsi reciklaza blokova, najpre se proveravaju susedni blokovi da li su zauzeti\&. Susedni blokovi koji su slobodni spajaju se sa blokom koji se reciklira i na taj nacin formira novi, veci blok\&.
.SS "Specifikacije first fit alokatora"
.IP "\(bu" 2
Maksimalno vreme izvrsavanja operacije alokacije bloka \fBnije\fP unapred poznato\&. Zbog navedene cinjenice alokator nije pogodan za hard real-time sisteme\&.
.IP "\(bu" 2
Maksimalno vreme izvrsavanja operacije dealokacije bloka je unapred poznato\&.
.IP "\(bu" 2
Ukupno minimalno zauzece RAM memorije (Cortex-M3 arch): \fB28B\fP 
.PP
.SH "Pool memorijski menadzer"
.PP
Pool memorijski menadzer je vrlo slican dinamickom memorijskom menadzeru sa tom razlikom sto ne moze da se zatrazi proizvoljna kolicina memorije\&. Potrazivanje memorije se vrsi unapred definisanom velicinom bloka koja vazi za datu instancu pool memorije\&.
.PP
Podrzano je postojanje veceg broja razlicitih instanci, koje se referenciraju strukturama tipa \fBesPMemHandle_T\fP\&. Pogledati primer \fBpmem_two_buffs\&.c\fP\&.
.SS "Specifikacije pool alokatora"
.IP "\(bu" 2
Maksimalno vreme izvrsavanja operacije alokacije bloka \fBje\fP unapred poznato\&. Zbog navedene cinjenice alokator \fBje\fP pogodan za hard real-time sisteme\&.
.IP "\(bu" 2
Maksimalno vreme izvrsavanja operacije dealokacije bloka je unapred poznato\&.
.IP "\(bu" 2
Ukupno minimalno zauzece RAM memorije (Cortex-M3 arch): \fB12B\fP 
.PP
.SH "Konfiguracija Memory Management modula"
.PP
Konfiguracija se vrsi u datoteci mem_config\&.h\&. Navodjenje opcija se vrsi u sekciji DEFINES\&.
.PP
Na primer, ako je potrebno dodeliti 1024B memorije static alokatoru onda se u datoteci mem_config\&.h u sekciji \fC\fBDEFINES\fP unosi\fP sledece:
.PP
.PP
.nf
    :
    :
    
/*===============================================================  DEFINES  ==*/
    
    :
    :
    
#define OPT_MEM_SMEM_SIZE               1024U

    :
    :
    
/*==============================================================  SETTINGS  ==*/,

    :
    :
.fi
.PP
.PP
Za opcije Memory Management modula pogledati \fBConfiguration\fP\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Memory Management from the source code\&.
